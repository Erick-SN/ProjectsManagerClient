{"ast":null,"code":"var _jsxFileName = \"/home/dereck/Udemy/React/MERN/taskmanager/src/context/tasks/taskState.js\";\nimport React, { useReducer } from 'react';\nimport taskContext from './taskContex';\nimport taskReducer from './taskReducer';\nimport { PROJECT_TASKS, ADD_NEW_TASK, VALIDATE_FORM_TASK, DELETE_TASK, TASK_STATE, CURREENT_TASK, UPDATE_TASK } from '../../types';\n\nconst TaskState = props => {\n  const initialSatate = {\n    tasks: [{\n      id: 1,\n      name: 'Example',\n      state: true,\n      projectId: 1\n    }, {\n      id: 2,\n      name: 'Example 2',\n      state: false,\n      projectId: 2\n    }],\n    projectTask: null,\n    error: false,\n    selectedTask: null\n  };\n  const [state, dispatch] = useReducer(taskReducer, initialSatate); //Get task by a single projectId\n\n  const getTask = projectId => {\n    dispatch({\n      type: PROJECT_TASKS,\n      payload: projectId\n    });\n  };\n\n  const addTask = task => {\n    dispatch({\n      type: ADD_NEW_TASK,\n      payload: task\n    });\n  };\n\n  const onError = () => {\n    dispatch({\n      type: VALIDATE_FORM_TASK\n    });\n  };\n\n  const deleteTask = id => {\n    dispatch({\n      type: DELETE_TASK,\n      payload: id\n    });\n  };\n\n  const changeState = task => {\n    dispatch({\n      type: TASK_STATE,\n      payload: task\n    });\n  };\n\n  const selectTask = task => {\n    dispatch({\n      type: CURREENT_TASK,\n      payload: task\n    });\n  };\n\n  const updateTask = task => {\n    dispatch({\n      type: UPDATE_TASK,\n      payload: task\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(taskContext.Provider, {\n    value: {\n      tasks: state.tasks,\n      projectTask: state.projectTask,\n      error: state.error,\n      selectedTask: state.selectedTask,\n      getTask,\n      addTask,\n      onError,\n      deleteTask,\n      changeState,\n      selectTask,\n      updateTask\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default TaskState;","map":{"version":3,"sources":["/home/dereck/Udemy/React/MERN/taskmanager/src/context/tasks/taskState.js"],"names":["React","useReducer","taskContext","taskReducer","PROJECT_TASKS","ADD_NEW_TASK","VALIDATE_FORM_TASK","DELETE_TASK","TASK_STATE","CURREENT_TASK","UPDATE_TASK","TaskState","props","initialSatate","tasks","id","name","state","projectId","projectTask","error","selectedTask","dispatch","getTask","type","payload","addTask","task","onError","deleteTask","changeState","selectTask","updateTask","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport taskContext from './taskContex';\nimport taskReducer from './taskReducer';\n\nimport {\n  PROJECT_TASKS,\n  ADD_NEW_TASK,\n  VALIDATE_FORM_TASK,\n  DELETE_TASK,\n  TASK_STATE,\n  CURREENT_TASK,\n  UPDATE_TASK,\n} from '../../types';\n\nconst TaskState = (props) => {\n  const initialSatate = {\n    tasks: [\n      {\n        id: 1,\n        name: 'Example',\n        state: true,\n        projectId: 1,\n      },\n      {\n        id: 2,\n        name: 'Example 2',\n        state: false,\n        projectId: 2,\n      },\n    ],\n    projectTask: null,\n    error: false,\n    selectedTask: null,\n  };\n\n  const [state, dispatch] = useReducer(taskReducer, initialSatate);\n\n  //Get task by a single projectId\n\n  const getTask = (projectId) => {\n    dispatch({\n      type: PROJECT_TASKS,\n      payload: projectId,\n    });\n  };\n  const addTask = (task) => {\n    dispatch({\n      type: ADD_NEW_TASK,\n      payload: task,\n    });\n  };\n\n  const onError = () => {\n    dispatch({ type: VALIDATE_FORM_TASK });\n  };\n\n  const deleteTask = (id) => {\n    dispatch({ type: DELETE_TASK, payload: id });\n  };\n\n  const changeState = (task) => {\n    dispatch({ type: TASK_STATE, payload: task });\n  };\n\n  const selectTask = (task) => {\n    dispatch({ type: CURREENT_TASK, payload: task });\n  };\n\n  const updateTask = (task) => {\n    dispatch({ type: UPDATE_TASK, payload: task });\n  };\n\n  return (\n    <taskContext.Provider\n      value={{\n        tasks: state.tasks,\n        projectTask: state.projectTask,\n        error: state.error,\n        selectedTask: state.selectedTask,\n        getTask,\n        addTask,\n        onError,\n        deleteTask,\n        changeState,\n        selectTask,\n        updateTask,\n      }}>\n      {props.children}\n    </taskContext.Provider>\n  );\n};\n\nexport default TaskState;\n"]},"metadata":{},"sourceType":"module"}