{"ast":null,"code":"var _jsxFileName = \"/home/dereck/Udemy/React/MERN/taskmanager/client/src/context/tasks/taskState.js\";\nimport React, { useReducer } from 'react';\nimport taskContext from './taskContex';\nimport taskReducer from './taskReducer';\nimport axiosClient from '../../config/axios';\nimport { PROJECT_TASKS, ADD_NEW_TASK, VALIDATE_FORM_TASK, DELETE_TASK, TASK_STATE, CURREENT_TASK, UPDATE_TASK, CLEAN } from '../../types';\n\nconst TaskState = props => {\n  const initialSatate = {\n    projectTask: [],\n    error: false,\n    selectedTask: null\n  };\n  const [state, dispatch] = useReducer(taskReducer, initialSatate); //Get task by a single projectId\n\n  const getTask = async project => {\n    try {\n      const response = axiosClient.get('/api/tasks', {\n        params: {\n          project\n        }\n      });\n      console.log(response.data);\n      dispatch({\n        type: PROJECT_TASKS,\n        payload: projectId\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const addTask = async task => {\n    try {\n      const response = await axiosClient.post('/api/tasks', task); // console.log(response.data.task);\n\n      dispatch({\n        type: ADD_NEW_TASK,\n        payload: response.data.task\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onError = () => {\n    dispatch({\n      type: VALIDATE_FORM_TASK\n    });\n  };\n\n  const deleteTask = id => {\n    dispatch({\n      type: DELETE_TASK,\n      payload: id\n    });\n  };\n\n  const changeState = task => {\n    dispatch({\n      type: TASK_STATE,\n      payload: task\n    });\n  };\n\n  const selectTask = task => {\n    dispatch({\n      type: CURREENT_TASK,\n      payload: task\n    });\n  };\n\n  const updateTask = task => {\n    dispatch({\n      type: UPDATE_TASK,\n      payload: task\n    });\n  };\n\n  const cleanTask = () => {\n    dispatch({\n      type: CLEAN\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(taskContext.Provider, {\n    value: {\n      projectTask: state.projectTask,\n      error: state.error,\n      selectedTask: state.selectedTask,\n      getTask,\n      addTask,\n      onError,\n      deleteTask,\n      changeState,\n      selectTask,\n      updateTask,\n      cleanTask\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default TaskState;","map":{"version":3,"sources":["/home/dereck/Udemy/React/MERN/taskmanager/client/src/context/tasks/taskState.js"],"names":["React","useReducer","taskContext","taskReducer","axiosClient","PROJECT_TASKS","ADD_NEW_TASK","VALIDATE_FORM_TASK","DELETE_TASK","TASK_STATE","CURREENT_TASK","UPDATE_TASK","CLEAN","TaskState","props","initialSatate","projectTask","error","selectedTask","state","dispatch","getTask","project","response","get","params","console","log","data","type","payload","projectId","addTask","task","post","onError","deleteTask","id","changeState","selectTask","updateTask","cleanTask","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport taskContext from './taskContex';\nimport taskReducer from './taskReducer';\nimport axiosClient from '../../config/axios';\nimport {\n  PROJECT_TASKS,\n  ADD_NEW_TASK,\n  VALIDATE_FORM_TASK,\n  DELETE_TASK,\n  TASK_STATE,\n  CURREENT_TASK,\n  UPDATE_TASK,\n  CLEAN,\n} from '../../types';\n\nconst TaskState = (props) => {\n  const initialSatate = {\n    projectTask: [],\n    error: false,\n    selectedTask: null,\n  };\n\n  const [state, dispatch] = useReducer(taskReducer, initialSatate);\n\n  //Get task by a single projectId\n\n  const getTask = async (project) => {\n    try {\n      const response = axiosClient.get('/api/tasks', { params: { project } });\n      console.log(response.data);\n      dispatch({\n        type: PROJECT_TASKS,\n        payload: projectId,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const addTask = async (task) => {\n    try {\n      const response = await axiosClient.post('/api/tasks', task);\n      // console.log(response.data.task);\n      dispatch({\n        type: ADD_NEW_TASK,\n        payload: response.data.task,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onError = () => {\n    dispatch({ type: VALIDATE_FORM_TASK });\n  };\n\n  const deleteTask = (id) => {\n    dispatch({ type: DELETE_TASK, payload: id });\n  };\n\n  const changeState = (task) => {\n    dispatch({ type: TASK_STATE, payload: task });\n  };\n\n  const selectTask = (task) => {\n    dispatch({ type: CURREENT_TASK, payload: task });\n  };\n\n  const updateTask = (task) => {\n    dispatch({ type: UPDATE_TASK, payload: task });\n  };\n\n  const cleanTask = () => {\n    dispatch({ type: CLEAN });\n  };\n\n  return (\n    <taskContext.Provider\n      value={{\n        projectTask: state.projectTask,\n        error: state.error,\n        selectedTask: state.selectedTask,\n        getTask,\n        addTask,\n        onError,\n        deleteTask,\n        changeState,\n        selectTask,\n        updateTask,\n        cleanTask,\n      }}>\n      {props.children}\n    </taskContext.Provider>\n  );\n};\n\nexport default TaskState;\n"]},"metadata":{},"sourceType":"module"}