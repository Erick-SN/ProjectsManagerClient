{"ast":null,"code":"var _jsxFileName = \"/home/dereck/Udemy/React/MERN/taskmanager/src/context/tasks/taskState.js\";\nimport React, { useReducer } from 'react';\nimport taskContext from './taskContex';\nimport taskReducer from './taskReducer';\nimport { PROJECT_TASKS, ADD_NEW_TASK, VALIDATE_FORM_TASK } from '../../types';\n\nconst TaskState = props => {\n  const initialSatate = {\n    tasks: [{\n      name: 'Example',\n      state: true,\n      projectId: 1\n    }, {\n      name: 'Example 2',\n      state: false,\n      projectId: 2\n    }],\n    projectTask: null,\n    error: false\n  };\n  const [state, dispatch] = useReducer(taskReducer, initialSatate); //Get task by a single projectId\n\n  const getTask = projectId => {\n    dispatch({\n      type: PROJECT_TASKS,\n      payload: projectId\n    });\n  };\n\n  const addTask = task => {\n    dispatch({\n      type: ADD_NEW_TASK,\n      payload: task\n    });\n  };\n\n  const onError = () => {\n    dispatch({\n      type: VALIDATE_FORM_TASK\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(taskContext.Provider, {\n    value: {\n      tasks: state.tasks,\n      projectTask: state.projectTask,\n      error: state.error,\n      getTask,\n      addTask,\n      onError\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default TaskState;","map":{"version":3,"sources":["/home/dereck/Udemy/React/MERN/taskmanager/src/context/tasks/taskState.js"],"names":["React","useReducer","taskContext","taskReducer","PROJECT_TASKS","ADD_NEW_TASK","VALIDATE_FORM_TASK","TaskState","props","initialSatate","tasks","name","state","projectId","projectTask","error","dispatch","getTask","type","payload","addTask","task","onError","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,kBAAtC,QAAgE,aAAhE;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAC3B,QAAMC,aAAa,GAAG;AACpBC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,IAAI,EAAE,SADR;AAEEC,MAAAA,KAAK,EAAE,IAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KADK,EAML;AACEF,MAAAA,IAAI,EAAE,WADR;AAEEC,MAAAA,KAAK,EAAE,KAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KANK,CADa;AAapBC,IAAAA,WAAW,EAAE,IAbO;AAcpBC,IAAAA,KAAK,EAAE;AAda,GAAtB;AAiBA,QAAM,CAACH,KAAD,EAAQI,QAAR,IAAoBf,UAAU,CAACE,WAAD,EAAcM,aAAd,CAApC,CAlB2B,CAoB3B;;AAEA,QAAMQ,OAAO,GAAIJ,SAAD,IAAe;AAC7BG,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEd,aADC;AAEPe,MAAAA,OAAO,EAAEN;AAFF,KAAD,CAAR;AAID,GALD;;AAMA,QAAMO,OAAO,GAAIC,IAAD,IAAU;AACxBL,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEb,YADC;AAEPc,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAID,GALD;;AAOA,QAAMC,OAAO,GAAG,MAAM;AACpBN,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEZ;AAAR,KAAD,CAAR;AACD,GAFD;;AAGA,sBACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLI,MAAAA,KAAK,EAAEE,KAAK,CAACF,KADR;AAELI,MAAAA,WAAW,EAAEF,KAAK,CAACE,WAFd;AAGLC,MAAAA,KAAK,EAAEH,KAAK,CAACG,KAHR;AAILE,MAAAA,OAJK;AAKLG,MAAAA,OALK;AAMLE,MAAAA;AANK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGd,KAAK,CAACe,QATT,CADF;AAaD,CAnDD;;AAqDA,eAAehB,SAAf","sourcesContent":["import React, { useReducer } from 'react';\nimport taskContext from './taskContex';\nimport taskReducer from './taskReducer';\n\nimport { PROJECT_TASKS, ADD_NEW_TASK, VALIDATE_FORM_TASK } from '../../types';\n\nconst TaskState = (props) => {\n  const initialSatate = {\n    tasks: [\n      {\n        name: 'Example',\n        state: true,\n        projectId: 1,\n      },\n      {\n        name: 'Example 2',\n        state: false,\n        projectId: 2,\n      },\n    ],\n    projectTask: null,\n    error: false,\n  };\n\n  const [state, dispatch] = useReducer(taskReducer, initialSatate);\n\n  //Get task by a single projectId\n\n  const getTask = (projectId) => {\n    dispatch({\n      type: PROJECT_TASKS,\n      payload: projectId,\n    });\n  };\n  const addTask = (task) => {\n    dispatch({\n      type: ADD_NEW_TASK,\n      payload: task,\n    });\n  };\n\n  const onError = () => {\n    dispatch({ type: VALIDATE_FORM_TASK });\n  };\n  return (\n    <taskContext.Provider\n      value={{\n        tasks: state.tasks,\n        projectTask: state.projectTask,\n        error: state.error,\n        getTask,\n        addTask,\n        onError,\n      }}>\n      {props.children}\n    </taskContext.Provider>\n  );\n};\n\nexport default TaskState;\n"]},"metadata":{},"sourceType":"module"}