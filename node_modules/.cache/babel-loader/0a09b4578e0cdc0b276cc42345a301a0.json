{"ast":null,"code":"var _jsxFileName = \"/home/dereck/Udemy/React/MERN/taskmanager/client/src/components/tasks/FormTask.jsx\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport projectContext from '../../context/projects/projectContext';\nimport taskContext from '../../context/tasks/taskContex';\n\nconst FormTask = () => {\n  const projectsContext = useContext(projectContext);\n  const {\n    project\n  } = projectsContext;\n  const tasksContext = useContext(taskContext);\n  const {\n    selectedTask,\n    error,\n    getTask,\n    addTask,\n    onError,\n    updateTask,\n    cleanTask\n  } = tasksContext;\n  const [newTask, setNewTask] = useState({\n    name: ''\n  });\n  const {\n    name\n  } = newTask;\n  useEffect(() => {\n    if (selectedTask !== null) {\n      setNewTask(selectedTask);\n    } else {\n      setNewTask({\n        name: ''\n      });\n    }\n  }, [selectedTask]);\n  if (!project) return null;\n  const [currentProject] = project;\n\n  const handleChange = e => {\n    setNewTask({ ...newTask,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (name.trim() === '') {\n      onError();\n      return;\n    }\n\n    if (selectedTask === null) {\n      newTask.project = currentProject._id;\n      addTask(newTask);\n    } else {\n      updateTask(newTask);\n      cleanTask();\n    }\n\n    getTask(currentProject.id);\n    setNewTask({\n      name: ''\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formulario\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contenedor-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"input-text\",\n    placeholder: \"TaskName\",\n    name: \"name\",\n    value: name,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contenedor-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primario btn-submit btn-block\",\n    value: selectedTask ? 'Edit task' : 'Add task',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }))), error ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mensaje error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, \"All inputs are required\") : null));\n};\n\nexport default FormTask;","map":{"version":3,"sources":["/home/dereck/Udemy/React/MERN/taskmanager/client/src/components/tasks/FormTask.jsx"],"names":["React","useContext","useState","useEffect","projectContext","taskContext","FormTask","projectsContext","project","tasksContext","selectedTask","error","getTask","addTask","onError","updateTask","cleanTask","newTask","setNewTask","name","currentProject","handleChange","e","target","value","onSubmit","preventDefault","trim","_id","id"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport projectContext from '../../context/projects/projectContext';\nimport taskContext from '../../context/tasks/taskContex';\n\nconst FormTask = () => {\n  const projectsContext = useContext(projectContext);\n  const { project } = projectsContext;\n\n  const tasksContext = useContext(taskContext);\n  const {\n    selectedTask,\n    error,\n    getTask,\n    addTask,\n    onError,\n    updateTask,\n    cleanTask,\n  } = tasksContext;\n\n  const [newTask, setNewTask] = useState({\n    name: '',\n  });\n  const { name } = newTask;\n\n  useEffect(() => {\n    if (selectedTask !== null) {\n      setNewTask(selectedTask);\n    } else {\n      setNewTask({ name: '' });\n    }\n  }, [selectedTask]);\n\n  if (!project) return null;\n  const [currentProject] = project;\n\n  const handleChange = (e) => {\n    setNewTask({\n      ...newTask,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    if (name.trim() === '') {\n      onError();\n      return;\n    }\n\n    if (selectedTask === null) {\n      newTask.project = currentProject._id;\n      addTask(newTask);\n    } else {\n      updateTask(newTask);\n      cleanTask();\n    }\n\n    getTask(currentProject.id);\n    setNewTask({\n      name: '',\n    });\n  };\n\n  return (\n    <>\n      <div className='formulario'>\n        <form onSubmit={onSubmit}>\n          <div className='contenedor-input'>\n            <input\n              type='text'\n              className='input-text'\n              placeholder='TaskName'\n              name='name'\n              value={name}\n              onChange={handleChange}\n            />\n          </div>\n          <div className='contenedor-input'>\n            <input\n              type='submit'\n              className='btn btn-primario btn-submit btn-block'\n              value={selectedTask ? 'Edit task' : 'Add task'}\n            />\n          </div>\n        </form>\n        {error ? (\n          <p className='mensaje error'>All inputs are required</p>\n        ) : null}\n      </div>\n    </>\n  );\n};\n\nexport default FormTask;\n"]},"metadata":{},"sourceType":"module"}